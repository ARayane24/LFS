### TO-DO List *********************************************************************
# check step2.2.sh [44] [683] you might need to change the gnu value to work on arm 
# check start.sh to change "root" key word in the system edit [54]
# check if the user has the required pkges and apps before start (instead of asking them)
************************************************************************************


### To keep in mind : *****************************************************************************************************
Filesystem Hierarchy Standard (FHS) 

The utmp, wtmp, btmp, and lastlog files use 32-bit integers for timestamps and they'll be fundamentally broken after year 2038. Many packages have stopped using them and other packages are going to stop using them. It is probably best to consider them deprecated. 
(found in step 4.2 [16])

.a => static lib
.o => dynamic lib

replace vim in step5.2.sh [1372]
****************************************************************************************************************************
 

### Future improvement :********************************************************
# add option to save progress in case of error to complete where it has stopped
# add bash code to easily add new languages
********************************************************************************


### General Description for the steps**************************************************************************************
#####################################################################
Chap 2.4: Creating new partition (Any separate partition that you want automatically mounted when the system starts must be specified in the /etc/fstab
file.)
    part 1 : /boot partition (~ 200 Mb) should be the 1st partition (Note: 500 Mb)
    part 2 : main NEW distro (10 ~ 40 Gb) (Note: 70Gb) 70 = 20+50 / 50+20
    part 3 : swap for the new distro (1 ~ 3 Gb) (Note:  can be the same as the one used by the host system, in which case it is not necessary to create another one.)
    part 4 : GRUB partition (~ 1 Mb) (Note: 500 Mb)
    part 5 : /boot/efi for UEFI (~ 200 Mb) (Note: 500 Mb)
    part 6 : /opt where multiple large packages like KDE or Texlive can be installed without embedding the files in the /usr hierarchy (Note: 30Gb)
#####################################################################

#####################################################################
create a set of directories in $LFS (in which we will install the temporary tools), add an unprivileged user (lfs), and create an appropriate
build environment for that user.
#####################################################################

#####################################################################
first, building a cross compiler and its associated libraries; 
second, using this cross toolchain to build several utilities in a way that isolates them from the host distribution; and third, entering the
chroot environment (which further improves host isolation) and constructing the remaining tools needed to build the
final system.
#####################################################################

#####################################################################
For proper operation of the isolated environment, some communication with the running kernel must be established.
This is done via the so-called Virtual Kernel File Systems, which will be mounted before entering the chroot
environment. You may want to verify that they are mounted by issuing the findmnt command.
#####################################################################

#####################################################################
At this point the essential programs and libraries have been created and your current LFS system is in a good state.
Your system can now be backed up for later reuse.
#####################################################################

#####################################################################
Config Network/Console/Kernel/GRUB than reboot
#####################################################################

*****************************************************************************************************************************


### Tips :******************************************************************************************************************
## comment this instruction : [ -z "$PS1" ] && return 
# in order to the bash code to work properly you have to comment that instruction in /etc/bash.bashrc


## use method rrm :
# use this method "rrm" instead of "rm -Rfv" to prevent the deletion of root files by safely remove only the user dirs 
rrm() {
    local path_to_remove="$1"

    if [ -z "$path_to_remove" ]; then
        echo -e "\033[31;49;1mERROR:\033[0m Missing parameter!"
        return 1
    fi

    # Convert relative path to absolute path
    if [[ "$path_to_remove" == ./* || "$path_to_remove" == ..* ]]; then
        path_to_remove=$(realpath "$path_to_remove") || return 1
        echo "realpath : $path_to_remove"
    fi

    # Check if path_to_remove is an absolute path and is not root
    if [[ "$(pwd)" != "/"  && "$path_to_remove" != "/" ]]; then
        # Remove without confirmation
        rm -Rfv "$path_to_remove"
    else
        echo -e "\033[31;49;1mERROR:\033[0m Invalid path or relative path detected"
        return 1
    fi
}


## cd to where the start.sh file found

*****************************************************************************************************************************